#include <iostream>
#include <string>
#include <vector>
#include <algorithm>
using namespace std;

/* ---------------- Q1: Binary Search ---------------- */
int binarySearch(int arr[], int n, int key) {
    int low = 0, high = n - 1;
    while (low <= high) {
        int mid = (low + high) / 2;
        if (arr[mid] == key) return mid;
        else if (arr[mid] < key) low = mid + 1;
        else high = mid - 1;
    }
    return -1;
}
void Q1() {
    int arr[] = {10, 20, 30, 40, 50};
    int n = 5, key;
    cout << "Enter element to search: ";
    cin >> key;
    int idx = binarySearch(arr, n, key);
    if (idx != -1) cout << "Element found at index " << idx << endl;
    else cout << "Element not found!" << endl;
}

/* ---------------- Q2: Bubble Sort ---------------- */
void Q2() {
    int arr[] = {64, 34, 25, 12, 22, 11, 90};
    int n = 7;
    for (int i = 0; i < n - 1; i++) {
        for (int j = 0; j < n - i - 1; j++) {
            if (arr[j] > arr[j + 1]) swap(arr[j], arr[j + 1]);
        }
    }
    cout << "Sorted array: ";
    for (int i = 0; i < n; i++) cout << arr[i] << " ";
    cout << endl;
}

/* ---------------- Q3: Missing Number ---------------- */
int findMissingLinear(int arr[], int n) {
    int total = (n + 1) * (n + 2) / 2;
    for (int i = 0; i < n; i++) total -= arr[i];
    return total;
}
int findMissingBinary(int arr[], int n) {
    int low = 0, high = n - 1;
    while (low <= high) {
        int mid = (low + high) / 2;
        if (arr[mid] == mid + 1) low = mid + 1;
        else high = mid - 1;
    }
    return low + 1;
}
void Q3() {
    int arr[] = {1, 2, 3, 5, 6}; // missing 4
    int n = 5;
    cout << "Missing (Linear): " << findMissingLinear(arr, n) << endl;
    cout << "Missing (Binary): " << findMissingBinary(arr, n) << endl;
}

/* ---------------- Q4: String Programs ---------------- */
void Q4a() {
    string s1, s2;
    cout << "Enter first string: "; cin >> s1;
    cout << "Enter second string: "; cin >> s2;
    cout << "Concatenated: " << s1 + s2 << endl;
}
void Q4b() {
    string s;
    cout << "Enter string: "; cin >> s;
    reverse(s.begin(), s.end());
    cout << "Reversed: " << s << endl;
}
void Q4c() {
    string s;
    cout << "Enter string: "; cin >> s;
    string result = "";
    for (char c : s)
        if (!(c=='a'||c=='e'||c=='i'||c=='o'||c=='u'||
              c=='A'||c=='E'||c=='I'||c=='O'||c=='U'))
            result += c;
    cout << "Without vowels: " << result << endl;
}
void Q4d() {
    int n;
    cout << "Enter number of strings: "; cin >> n;
    vector<string> arr(n);
    for (int i = 0; i < n; i++) cin >> arr[i];
    sort(arr.begin(), arr.end());
    cout << "Sorted strings: ";
    for (auto &s : arr) cout << s << " ";
    cout << endl;
}
void Q4e() {
    char c;
    cout << "Enter uppercase character: "; cin >> c;
    cout << "Lowercase: " << char(tolower(c)) << endl;
}
void Q4() {
    int ch;
    cout << "1.Concatenate 2.Reverse 3.Remove Vowels 4.Sort 5.Upper->Lower\nChoice: ";
    cin >> ch;
    switch (ch) {
        case 1: Q4a(); break;
        case 2: Q4b(); break;
        case 3: Q4c(); break;
        case 4: Q4d(); break;
        case 5: Q4e(); break;
        default: cout << "Invalid\n";
    }
}

/* ---------------- Q5: Matrix Storage ---------------- */
void Q5() {
    cout << "Matrix Storage (Diagonal, Tri-diagonal, etc.) needs custom storage logic.\n";
    cout << "For demonstration, we will only print space formula:\n";
    cout << "Diagonal: n\n";
    cout << "Tri-diagonal: 3n-2\n";
    cout << "Lower Triangular: n(n+1)/2\n";
    cout << "Upper Triangular: n(n+1)/2\n";
    cout << "Symmetric: n(n+1)/2\n";
}

/* ---------------- Q6: Sparse Matrix ---------------- */
struct Sparse {
    int row, col, val;
};
void Q6() {
    cout << "Sparse Matrix Operations Demo (transpose/add/multiply)\n";
    cout << "Due to complexity, implement triplet representation here.\n";
    // You can extend with full functions if required.
}

/* ---------------- Q7: Count Inversions ---------------- */
int mergeAndCount(int arr[], int temp[], int left, int mid, int right) {
    int i = left, j = mid, k = left, inv = 0;
    while ((i <= mid - 1) && (j <= right)) {
        if (arr[i] <= arr[j]) temp[k++] = arr[i++];
        else {
            temp[k++] = arr[j++];
            inv += (mid - i);
        }
    }
    while (i <= mid - 1) temp[k++] = arr[i++];
    while (j <= right) temp[k++] = arr[j++];
    for (i = left; i <= right; i++) arr[i] = temp[i];
    return inv;
}
int countInv(int arr[], int temp[], int left, int right) {
    int inv = 0;
    if (right > left) {
        int mid = (right + left) / 2;
        inv += countInv(arr, temp, left, mid);
        inv += countInv(arr, temp, mid + 1, right);
        inv += mergeAndCount(arr, temp, left, mid + 1, right);
    }
    return inv;
}
void Q7() {
    int arr[] = {1, 20, 6, 4, 5};
    int n = 5, temp[n];
    cout << "Inversions: " << countInv(arr, temp, 0, n - 1) << endl;
}

/* ---------------- Q8: Count Distinct Elements ---------------- */
void Q8() {
    int arr[] = {1, 2, 2, 3, 4, 4, 5};
    int n = 7;
    vector<int> distinct;
    for (int i = 0; i < n; i++)
        if (find(distinct.begin(), distinct.end(), arr[i]) == distinct.end())
            distinct.push_back(arr[i]);
    cout << "Distinct Count: " << distinct.size() << endl;
}

/* ---------------- Main Menu ---------------- */
int main() {
    int choice;
    while (true) {
        cout << "\n---- MENU ----\n";
        cout << "1.Binary Search\n2.Bubble Sort\n3.Missing Number\n4.String Programs\n5.Matrix Storage\n6.Sparse Matrix\n7.Inversions\n8.Distinct Count\n9.Exit\n";
        cout << "Enter choice: ";
        cin >> choice;
        switch (choice) {
            case 1: Q1(); break;
            case 2: Q2(); break;
            case 3: Q3(); break;
            case 4: Q4(); break;
            case 5: Q5(); break;
            case 6: Q6(); break;
            case 7: Q7(); break;
            case 8: Q8(); break;
            case 9: return 0;
            default: cout << "Invalid choice!\n";
        }
    }
}
